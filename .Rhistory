Ghana.metadata = read.csv(file = "~/Dropbox/Research/Projects/Burkitts/ImmunoSEQ/Ghana metadata.csv")
Ghana.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/BurkittGhana", columns = "all")
names(Ghana.IGH) = as.character(Ghana.metadata[match(names(Ghana.IGH), gsub(Ghana.metadata$fileName, pattern = ".tsv", replacement = "")),"tumorID"])
results = data.frame()
i = 1
for(i in 1:length(Ghana.IGH)){
file = Ghana.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Ghana.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Ghana")
ggsave("Ghana frequency clone resolved IGH.png")
Ghana.mean.cloneResolved = aggregate(data = results, count~cloneResolved, mean)
write.csv(Ghana.mean.cloneResolved, file = "Ghana mean count by clone resolved IGH.csv")
Rawlings.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/RawlingsJEM2015", columns = "all")
results = data.frame()
i = 1
for(i in 1:length(Rawlings.IGH)){
file = Rawlings.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Rawlings.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Rawlings")
ggsave("Rawlings frequency clone resolved IGH.png")
Rawlings.mean.cloneResolved = aggregate(data = results, count~cloneResolved, mean)
write.csv(Rawlings.mean.cloneResolved, file = "Rawlings mean count by clone resolved IGH.csv")
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/RawlingsJEM2015", columns = "all")
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
ggsave("2270 frequency clone resolved IGH.png")
Transplant.mean.cloneResolved = aggregate(data = results, count~cloneResolved, mean)
write.csv(Transplant.mean.cloneResolved, file = "2270 mean count by clone resolved IGH.csv")
results = data.frame()
i = 1
for(i in 1:length(Ghana.IGH)){
file = Ghana.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Ghana.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Ghana")
ggsave("Ghana frequency clone resolved IGH.png", height = 7, width = 8, dpi = 300)
results = data.frame()
i = 1
for(i in 1:length(Ghana.IGH)){
file = Ghana.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Ghana.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Ghana")
ggsave("Ghana frequency clone resolved IGH.png", height = 6, width = 9, dpi = 300)
results = data.frame()
i = 1
for(i in 1:length(Rawlings.IGH)){
file = Rawlings.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Rawlings.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Rawlings")
ggsave("Rawlings frequency clone resolved IGH.png", height = 6, width = 9, dpi = 300)
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Rawlings")
ggsave("Rawlings frequency clone resolved IGH.png", height = 8, width = 9, dpi = 300)
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
ggsave("2270 frequency clone resolved IGH.png", height = 6, width = 9, dpi = 300)
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
ggsave("2270 frequency clone resolved IGH.png", height = 8, width = 9, dpi = 300)
results = data.frame()
i = 1
for(i in 1:length(UCI.IGH)){
file = UCI.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(UCI.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "UCI")
ggsave("UCI frequency clone resolved IGH.png")
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "UCI")
results = data.frame()
i = 1
for(i in 1:length(UCI.IGH)){
file = UCI.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(UCI.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
UCI.metadata = read.csv(file = "~/Dropbox/Research/Projects/Burkitts/ImmunoSEQ/UCI metadata.csv")
included.IGH = gsub(as.character(UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH", "fileName"]), pattern = ".tsv", replacement = "")
UCI.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/BurkittUCI", columns = "all")
UCI.IGH = UCI.IGH[included.IGH]
names(UCI.IGH) = as.character(UCI.metadata[match(names(UCI.IGH), gsub(UCI.metadata$fileName, pattern = ".tsv", replacement = "")),"tumorID"])
results = data.frame()
i = 1
for(i in 1:length(UCI.IGH)){
file = UCI.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(UCI.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
names(UCI.IGH)
match(names(UCI.IGH), UCI.metadata)
UCI.metadata$fileName)
UCI.metadata$fileName
as.character(UCI.metadata[match(names(UCI.IGH), as.character(UCI.metadata$fileName)),"tumorID"])
as.character(UCI.metadata$fileName)
match(names(UCI.IGH), as.character(UCI.metadata$fileName))
names(UCI.IGH)
UCI.metadata = read.csv(file = "~/Dropbox/Research/Projects/Burkitts/ImmunoSEQ/UCI metadata.csv")
included.IGH = gsub(as.character(UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH", "fileName"]), pattern = ".tsv", replacement = "")
UCI.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/BurkittUCI", columns = "all")
UCI.IGH = UCI.IGH[included.IGH]
as.character(UCI.metadata[match(names(UCI.IGH), as.character(UCI.metadata$fileName)),"tumorID"])
names(UCI.IGH)
as.character(UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH", "fileName"])
UCI.metadata$included
UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH", "fileName"]
UCI.metadata
UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH", "fileName"]
UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH"
UCI.metadata = read.csv(file = "~/Dropbox/Research/Projects/Burkitts/ImmunoSEQ/UCI metadata.csv")
as.character(UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$locus == "IGH", "fileName"])
UCI.metadata$included
UCI.metadata$locus
as.character(UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$Locus == "IGH", "fileName"])
included.IGH = as.character(UCI.metadata[UCI.metadata$included == "Yes" & UCI.metadata$Locus == "IGH", "fileName"])
UCI.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/BurkittUCI", columns = "all")
UCI.IGH = UCI.IGH[included.IGH]
names(UCI.IGH) = as.character(UCI.metadata[match(names(UCI.IGH), as.character(UCI.metadata$fileName)),"tumorID"])
results = data.frame()
i = 1
for(i in 1:length(UCI.IGH)){
file = UCI.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(UCI.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "UCI")
ggsave("UCI frequency clone resolved IGH.png")
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/JHU 0844 - FHCRC 2270/IGH", columns = "all")
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = "all")
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
lapply(Transplant.IGH, names)
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = "c("count","cloneResolved"))
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = c("count","cloneResolved"))
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = c("count","count (reads)", "cloneResolved"))
?readImmunoSeq
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = c("count","count (reads)", "count (templates)", "cloneResolved"))
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = c("count", "count (reads)", "count (templates)", "cloneResolved"))
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = "all")
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/")
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = "all")
Transplant.IGH = readImmunoSeq(path = "/Volumes/home/Warren_NGS/ImmunoSEQ/IGH/postTransplantCy/", columns = "all")
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
ggsave("2270 frequency clone resolved IGH.png", height = 8, width = 9, dpi = 300)
Transplant.mean.cloneResolved = aggregate(data = results, count~cloneResolved, mean)
write.csv(Transplant.mean.cloneResolved, file = "2270 mean count by clone resolved IGH.csv")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
results = data.frame()
i = 1
for(i in 1:length(UCI.IGH)){
file = UCI.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(UCI.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
a=ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "UCI")
results = data.frame()
i = 1
for(i in 1:length(Ghana.IGH)){
file = Ghana.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Ghana.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
b=ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Ghana")
results = data.frame()
i = 1
for(i in 1:length(Rawlings.IGH)){
file = Rawlings.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Rawlings.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
c=ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "Rawlings")
results = data.frame()
i = 1
for(i in 1:length(Transplant.IGH)){
file = Transplant.IGH[[i]]
clone = aggregate(data = file, count~cloneResolved, FUN = sum)
clone$count = clone$count/sum(file$count)*100
clone$sample = rep(names(Transplant.IGH[i]), nrow(clone))
results = rbind(clone, results)
}
d=ggplot(results, aes(x = sample, fill = cloneResolved, y = count)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "", y = "% Reads", title = "2270")
multiplot(a, b, c, d, cols=2)
multiplot(b, c, a, d, cols=2)
ggsave("multiplot", height = 16, width = 9)
ggsave("multiplot.png", height = 16, width = 9)
png(file ="Multiplot.png", res = 300, units = "in", height = 12, width = 9)
multiplot(b, c, a, d, cols=2)
dev.off()
png(file ="Multiplot.png", res = 300, units = "in", height = 12, width = 18)
multiplot(b, c, a, d, cols=2)
dev.off()
?spread
?spread
library(tidyr)
?spread
x = read.csv(file.choose())
library(dplyr)
spread(x, row, column)
View(x)
spread(x, Row, Column)
spread(x, Peptide, Value)
spread(x, Row, Column)
spread(x, Column)
spread(x, Column)
View(x)
spread(x, Column)
spread(x, Column)
View(x)
separate(x, column)
separate(x, Column)
separate(x, Row)
spread(x, Column)
x
spread(x, Column)
spread(x, Row)
spread(x, Value, Column)
?cast
cast(x, Row~Column)
library(reshape)
cast(x, Row~Column)
x = read.csv(file.choose())
matrix = cast(x, Row ~ Column)
matrix
library(LymphoSeq)
library(LymphoSeqData)
library(ggplot2)
library(reshape)
setwd("~/Dropbox/Research/Projects/HES case report/")
# Import data
metadata = read.csv("~/Dropbox/Research/Projects/HES case report/JH_Metadata.csv")
?readImmunoSeq
file.path = "~/Dropbox/Research/Projects/HES case report/JH_TRB_sequencing/"
file.list = readImmunoSeq(path = file.path, columns = "all")
names(file.list) = metadata$ID[match(names(file.list), metadata$fileName)]
file.list = file.list[match(metadata$ID, names(file.list))]
productive.aa = productiveSeq(file.list = file.list, aggregate = "aminoAcid", prevalence = FALSE)
productive.nt = productiveSeq(file.list = file.list, aggregate = "nucleotide", prevalence = FALSE)
searchSeq(file.list, sequence sequence = "GAGTCGCCCAGCCCCAACCAGACCTCTCTGTACTTCTGTGCCAGCAGTTGGGACGGCTCTAGCAATCAGCCCCAGCATTTTGGTGAT", type = "nucleotide")
searchSeq(file.list, sequence = "GAGTCGCCCAGCCCCAACCAGACCTCTCTGTACTTCTGTGCCAGCAGTTGGGACGGCTCTAGCAATCAGCCCCAGCATTTTGGTGAT", type = "nucleotide")
searchSeq(file.list, sequence = "CAWSETGNTIYF", type = "aminoAcid")
searchSeq(file.list, sequence = "CASSVWDSYSPDEQYF", type = "aminoAcid")
install.packages("roxygen2")
load("~/Dropbox/Research/Packages/LymphoSeqDB/data/prevalenceTRB.rda")
library(LymphoSeqDB)
library(LymphoSeq)
library(data.table)
library(VennDiagram)
data("publishedTRB")
data("prevalenceTRB")
# Import VDJdb
vdjdb = fread(file = "/Users/David/Dropbox/Research/Projects/Published TCRs/VDJdb/vdjdb.txt", header = TRUE)
# Subset TRB human sequences
vdjdb.trb.human = vdjdb[vdjdb$species == "HomoSapiens" & vdjdb$gene == "TRB", ]
# Reformat into publishedTRB format
vdjdb.trb.human$epitope = paste(vdjdb.trb.human$antigen.gene, vdjdb.trb.human$antigen.epitope, sep = "-")
vdjdb.trb.human.formatted = vdjdb.trb.human[,c("cdr3", "reference.id", "mhc.a", "antigen.species", "epitope")]
vdjdb.trb.human.formatted$reference.id = gsub(vdjdb.trb.human.formatted$reference.id, pattern = "PMID:", replacement = "")
names(vdjdb.trb.human.formatted) = names(publishedTRB)[1:5]
vdjdb.trb.human.formatted = unique(vdjdb.trb.human.formatted)
# Aggregate duplicate sequences
vdjdb.trb.human.formatted = aggregate(data = vdjdb.trb.human.formatted, .~aminoAcid, toString)
# Remove duplicates from aggregated rows
PMID = setDT(vdjdb.trb.human.formatted)[, list(PMID = toString(unique(strsplit(PMID, ',\\s*|\\s+')[[1]]))), by = aminoAcid]
HLA = setDT(vdjdb.trb.human.formatted)[, list(HLA = toString(unique(strsplit(HLA, ',\\s*|\\s+')[[1]]))), by = aminoAcid]
antigen = setDT(vdjdb.trb.human.formatted)[, list(antigen = toString(unique(strsplit(antigen, ',\\s*|\\s+')[[1]]))), by = aminoAcid]
epitope = setDT(vdjdb.trb.human.formatted)[, list(epitope = toString(unique(strsplit(epitope, ',\\s*|\\s+')[[1]]))), by = aminoAcid]
vdjdb.trb.human.formatted = data.frame(aminoAcid = vdjdb.trb.human.formatted$aminoAcid, PMID = PMID$PMID, HLA = HLA$HLA, antigen = antigen$antigen, epitope = epitope$epitope)
# Add prevalence column
vdjdb.trb.human.formatted = merge(vdjdb.trb.human.formatted, prevalenceTRB, all.x = TRUE)
vdjdb.trb.human.formatted$prevalence[is.na(vdjdb.trb.human.formatted$prevalence)] <- 0
# Number of VDJdb sequences in LymphoSeq
length(publishedTRB$aminoAcid %in% vdjdb.trb.human.formatted$aminoAcid)
length(intersect(vdjdb.trb.human.formatted$aminoAcid, publishedTRB$aminoAcid))
length(setdiff(vdjdb.trb.human.formatted$aminoAcid, publishedTRB$aminoAcid))
length(setdiff(publishedTRB$aminoAcid, vdjdb.trb.human.formatted$aminoAcid))
grid::grid.newpage()
venn <- VennDiagram::draw.pairwise.venn(area1 = length(publishedTRB$aminoAcid),
area2 = length(vdjdb.trb.human.formatted$aminoAcid),
cross.area = length(intersect(vdjdb.trb.human.formatted$aminoAcid, publishedTRB$aminoAcid)),
category = c("LymphoSeq", "VDJdb"),
cat.fontfamily = rep("sans", 2),
fontfamily = rep("sans", 3),
fill = c("#3288bd", "#d53e4f"),
cat.pos = c(0, 0),
cat.dist = rep(0.025, 2),
cex = 1,
cat.cex = 0.8,
lwd = rep(2, 2))
grid::grid.draw(venn)
publishedTRB = publishedTRB.VDJdb
publishedTRB.notVDJdb = publishedTRB[!(publishedTRB$aminoAcid %in% vdjdb.trb.human.formatted$aminoAcid),]
publishedTRB.VDJdb = rbind(publishedTRB.notVDJdb, vdjdb.trb.human.formatted)
publishedTRB = publishedTRB.VDJdb
save(publishedTRB, file = "~/Dropbox/Research/Packages/LymphoSeqDB/data/publishedTRB.rda")
roxygen2::roxygenise()
library(LymphoSeqDB)
roxygen2::roxygenise()
library(BiocCheck)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(BioCheck)
?publishedTRB
